# Are you sad enough?
import discord
import asyncio
import time
import datetime
import random
from discord.ext import commands
import keep_alive

# Log-in data
PREFIX = "!" # prefix
TOKEN = "DELETED" # bot token

bot = commands.Bot(command_prefix=PREFIX, case_insensitive=True)
bot.remove_command('help')

# Constants
ADMINS = "DELETED"
VERSION = "v0.4 - Unite! Stable (27.10.21)"
START_TIME = time.time()
HELP_TEXT = f"""{PREFIX}help: –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
{PREFIX}join: –¥–æ–±–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ —Ç–æ—Ç –µ—â—ë –Ω–µ –≤ –Ω–µ–π.
{PREFIX}leave: —É–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ —Ç–æ—Ç —Å–µ–π—á–∞—Å –≤ –Ω–µ–π.
{PREFIX}next: —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º).
{PREFIX}list: –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Å –ø–æ–∑–∏—Ü–∏—è–º–∏.
{PREFIX}ping: –ø–∏–Ω–≥ –±–æ—Ç–∞.
{PREFIX}version: —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞."""

queue = []

# Misc commands
def embed_gen(title, desc):
    embed = discord.Embed(title=title, description=desc, color=random.randint(0, 0xFFFFFF), timestamp=datetime.datetime.utcnow())
    embed.set_footer(text=VERSION)
    return embed

async def sync_queue(restore: bool):
    await bot.wait_until_ready()
    if restore:
        rfile = open('queue.txt', 'r')
        data = rfile.read().split('\n')
        for id in data:
            if id:
                user = await bot.fetch_user(int(id))
                queue.append(user)
        rfile.close()
    else:
        wfile = open('queue.txt', 'w')
        data = ""
        if queue:
            data = str(queue[0].id)
            for i in range(1, len(queue)):
                data += "\n" + str(queue[i].id)
        wfile.write(data)
        wfile.close()


async def notify_dm(name):
    DELETED = await bot.fetch_user(DELETED)
    channel = await DELETED.create_dm()
    await channel.send(f"{name} –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –æ—á–µ—Ä–µ–¥—å.")
    

@bot.command()
async def help(ctx):
    await ctx.send(embed=embed_gen("–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", HELP_TEXT))


@bot.command()
async def ping(ctx):
    before = time.monotonic()
    message = await ctx.send("`–ü–æ–Ω–≥!`")
    ping = (time.monotonic() - before) * 1000
    await message.edit(content=f"`–ü–æ–Ω–≥! {int(ping)}ms`")


@bot.command()
async def version(ctx):
    await ctx.send(embed=embed_gen("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è", VERSION))


@bot.command()
async def uptime(ctx):
    await ctx.send(embed=embed_gen("–ê–ø—Ç–∞–π–º", f"–Ø —Ä–∞–±–æ—Ç–∞—é —É–∂–µ {int(time.time() - START_TIME)} —Å–µ–∫—É–Ω–¥ –ø–æ–¥—Ä—è–¥!"))


@bot.command()
async def show_status(ctx):
    started = time.time()
    message = await ctx.send("pog")
    while True:
        await message.edit(content=f"`I'm doing this process for {int(time.time() - started)} seconds.`")
        await asyncio.sleep(10)


# Queue commands
@bot.command()
async def join(ctx, *forcing: discord.User):
    emb_title, emb_desc, text_field = "", "", ""
    user = ctx.author
    if forcing:
        forced = forcing[0]
        if user.id in ADMINS:
            if forced not in queue:
                queue.append(forced)
                emb_title = "–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
                emb_desc = f"{forced.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.mention}."
                text_field = forced.mention
            else:
                emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
                emb_desc = f"{forced.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {queue.index(forced) + 1}."
        else:
            emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            emb_desc = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
    else:
        if user not in queue:
            if (not queue):
                await notify_dm(user.name)
            emb_title = "–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
            emb_desc = f"{user.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
            text_field = user.mention
            queue.append(user)
        else:
            emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            emb_desc = f"{user.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {queue.index(user) + 1}."
    await ctx.send(text_field, embed=embed_gen(emb_title, emb_desc))
    await sync_queue(False)


@bot.command()
async def leave(ctx, *forcing: discord.Member):
    emb_title, emb_desc, text_field = "", "", ""
    user = ctx.author
    if forcing:
        forced = forcing[0]
        if user.id in ADMINS:
            if forced not in queue:
                emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
                emb_desc = f"{forced.mention} –∏ —Ç–∞–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏."
            else:
                emb_title = "–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
                emb_desc = f"{forced.mention} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.mention}."
                text_field = forced.mention
                if queue.index(user) == 0 and len(queue) > 1:
                    emb_desc += f"\n{queue[1].mention}, –í—ã —Å–ª–µ–¥—É—é—â–∏–π!"
                    text_field += " " + queue[1].mention
                elif len(queue) == 1:
                    emb_desc += "\n–¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!"
                queue.pop(queue.index(forced))
        else:
            emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            emb_desc = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
    else:
        if user not in queue:
            emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            emb_desc = f"{user.mention} –∏ —Ç–∞–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏."
        else:
            emb_title = "–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
            emb_desc = f"{user.mention} –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏."
            text_field = user.mention
            if queue.index(user) == 0 and len(queue) > 1:
                emb_desc += f"\n{queue[1].mention}, –í—ã —Å–ª–µ–¥—É—é—â–∏–π!"
                text_field += " " + queue[1].mention
            elif len(queue) == 1:
                emb_desc += "\n–¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!"
            queue.pop(queue.index(user))
    await ctx.send(text_field, embed=embed_gen(emb_title, emb_desc))
    await sync_queue(False)


@bot.command()
async def next(ctx):
    emb_title, emb_desc, text_field = "", "", ""
    author = ctx.author
    if author.id in ADMINS:
        if not len(queue):
            emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            emb_desc = "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
        else:
            stop_rolling = False
            while not stop_rolling:
                emb_title = "–°–ª–µ–¥—É—é—â–∏–π!"
                emb_desc = f"{queue[0].mention}, –Ω–∞—Å—Ç–∞–ª–∞ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å! –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –ª–∞–π–∫–æ–º –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä—ë—Ö –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –í—ã –µ—â—ë —Å –Ω–∞–º–∏."
                text_field = queue[0].mention
                message = await ctx.send(text_field, embed=embed_gen(emb_title, emb_desc))
                await message.add_reaction('üëç')
                def check(reaction, user):
                    return user == queue[0] and str(reaction.emoji) == 'üëç'
                try:
                    reaction, user = await bot.wait_for('reaction_add', timeout=180.0, check=check)
                except asyncio.TimeoutError:
                    emb_title = "–¢–æ–ª—å–∫–æ –Ω–µ —ç—Ç–æ..."
                    emb_desc = f'{queue[0].mention} –ø—Ä–æ–∑–µ–≤–∞–ª —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å!'
                else:
                    emb_title = "–ü–æ–ª—É—á–∏–ª–æ—Å—å!"
                    emb_desc = f'{queue[0].mention} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –æ–Ω –≥–æ—Ç–æ–≤ –∫ —Å–¥–∞—á–µ.'
                    stop_rolling = True
                if len(queue) == 1:
                    emb_desc += "\n–¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!"
                    stop_rolling = True
                elif stop_rolling:
                    emb_desc += f"{queue[1].mention}, –í—ã —Å–ª–µ–¥—É—é—â–∏–π!"
                    text_field = queue[1].mention
                queue.pop(0)
    else:
        emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
        emb_desc = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
    await ctx.send(text_field, embed=embed_gen(emb_title, emb_desc))
    await sync_queue(False)


@bot.command()
async def list(ctx):
    emb_title, emb_desc = "–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å", ""
    user = ctx.author
    if not len(queue):
        emb_desc = "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
    else:
        for i in range(len(queue)):
            emb_desc += f"{i + 1}: {queue[i].name}\n"
        if user in queue:
            position = queue.index(user) + 1
            emb_desc += f"\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {position}. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {15 * position}-{25 * position} –º–∏–Ω—É—Ç."
    await ctx.send(embed=embed_gen(emb_title, emb_desc))


@bot.command()
async def clear(ctx):
    emb_title, emb_desc = "", ""
    author = ctx.author
    if author.id in ADMINS:
        emb_title = "–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        emb_desc = "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞."
        queue.clear()
    else:
        emb_title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
        emb_desc = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
    await ctx.send(embed=embed_gen(emb_title, emb_desc))
    await sync_queue(False)


keep_alive.keep_alive()
bot.loop.create_task(sync_queue(True))
bot.run(TOKEN)
